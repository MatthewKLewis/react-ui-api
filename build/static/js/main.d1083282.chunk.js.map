{"version":3,"sources":["components/Header.js","components/Tab.js","components/Content.js","components/TabContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Tab","info","label","action","onClick","Content","content","link","TabContainer","props","updateContent","e","target","innerText","setState","contentString","film","director","description","release_date","producer","state","contentLink","Fragment","this","title","React","Component","App","url","films","fetch","headers","Accept","then","response","json","obj","console","log","arrayOfContainers","map","item","key","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mWAceA,MARf,WACE,OACE,yBAAKC,UAAU,UACb,4D,YCASC,MANf,YAAoC,EAAtBC,KAAuB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,OACzB,OACA,4BAAQC,QAASD,EAAQJ,UAAU,OAAOG,I,MCU7BG,MATf,YAAmC,IAAjBC,EAAgB,EAAhBA,QAASC,EAAO,EAAPA,KACzB,OACE,yBAAKR,UAAU,WACb,2BAAIO,GACJ,2BAAIC,KC4CKC,E,kDA9Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,cAAgB,SAACC,GAIY,aAAvBA,EAAEC,OAAOC,WACX,EAAKC,SAAS,CAACC,cAAe,EAAKN,MAAMO,KAAKC,WAGrB,gBAAvBN,EAAEC,OAAOC,WACX,EAAKC,SAAS,CAACC,cAAe,EAAKN,MAAMO,KAAKE,cAGrB,iBAAvBP,EAAEC,OAAOC,WACX,EAAKC,SAAS,CAACC,cAAe,EAAKN,MAAMO,KAAKG,eAGrB,aAAvBR,EAAEC,OAAOC,WACX,EAAKC,SAAS,CAACC,cAAe,EAAKN,MAAMO,KAAKI,YAvBhD,EAAKC,MAAQ,CACXN,cAAe,GACfO,YAAa,IAJE,E,qDA+BjB,OACE,kBAAC,IAAMC,SAAP,KACE,wBAAIxB,UAAU,eAAeyB,KAAKf,MAAMO,KAAKS,OAC7C,yBAAK1B,UAAU,gBACb,kBAAC,EAAD,CAAKI,OAAQqB,KAAKd,cAAeR,MAAO,aACxC,kBAAC,EAAD,CAAKC,OAAQqB,KAAKd,cAAeR,MAAO,gBACxC,kBAAC,EAAD,CAAKC,OAAQqB,KAAKd,cAAeR,MAAO,iBACxC,kBAAC,EAAD,CAAKC,OAAQqB,KAAKd,cAAeR,MAAO,cAE1C,kBAAC,EAAD,CAASI,QAASkB,KAAKH,MAAMN,cAAeR,KAAMiB,KAAKH,MAAMC,mB,GAzC1CI,IAAMC,WCuClBC,E,kDAtCb,aAAe,IAAD,8BACZ,gBAEKP,MAAQ,CACXQ,IAAK,wCACLC,MAAO,IALG,E,gEAUO,IAAD,OAClBC,MAAMP,KAAKH,MAAMQ,IAAK,CACpBG,QAAS,CACPC,OAAQ,sBAGTC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKvB,SAAS,CAAEgB,MAAOO,IACvBC,QAAQC,IAAIF,Q,+BAMhB,IAAIG,EAAoBhB,KAAKH,MAAMS,MAAMW,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAcC,IAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmB9B,KAAM0B,OAEjH,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACCyC,O,GAjCSd,IAAMC,WCKJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.d1083282.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\n//Import Components\n\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1>The Films of Studio Ghibli</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport './Tab.css';\n\nfunction Tab({info, label, action}) {\n  return (\n  <button onClick={action} className=\"Tab\">{label}</button>\n  );\n}\n\nexport default Tab;\n","import React from 'react';\nimport './Content.css';\n\n//Import Components\n\n\nfunction Content({content, link}) {\n  return (\n    <div className=\"Content\">\n      <p>{content}</p>\n      <p>{link}</p>\n    </div>\n  );\n}\n\nexport default Content;\n","import React from 'react';\nimport './TabContainer.css';\n\n//Import Components\nimport Tab from './Tab'\nimport Content from './Content'\n\nclass TabContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contentString: '',\n      contentLink: ''\n    };\n  }\n\n  updateContent = (e) => {\n    \n    //console.log(this.props);\n\n    if (e.target.innerText === 'Director') {\n      this.setState({contentString: this.props.film.director})\n      //this.setState({contentLink: this.props.film.locations})\n    } \n    if (e.target.innerText === 'Description') {\n      this.setState({contentString: this.props.film.description})\n      //this.setState({contentLink: this.props.film.people})\n    }  \n    if (e.target.innerText === 'Release Date') {\n      this.setState({contentString: this.props.film.release_date})\n      //this.setState({contentLink: this.props.film.species})\n    } \n    if (e.target.innerText === 'Producer') {\n      this.setState({contentString: this.props.film.producer})\n      //this.setState({contentLink: this.props.film.vehicles})\n    } \n  }\n  \n  render() {\n    return (\n      <React.Fragment>\n        <h1 className='frameHeader'>{this.props.film.title}</h1>\n        <div className=\"TabContainer\">\n          <Tab action={this.updateContent} label={'Director'} />\n          <Tab action={this.updateContent} label={'Description'} />\n          <Tab action={this.updateContent} label={'Release Date'} />\n          <Tab action={this.updateContent} label={'Producer'} />\n        </div>\n        <Content content={this.state.contentString} link={this.state.contentLink}/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default TabContainer;\n","import React from 'react';\nimport './App.css';\n\n//Import Components\nimport Header from './components/Header'\nimport TabContainer from './components/TabContainer';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      url: 'https://ghibliapi.herokuapp.com/films',\n      films: []\n    };\n  }\n\n  //built in methods:\n  componentDidMount() {\n    fetch(this.state.url, {\n      headers: {\n        Accept: \"application/json\",\n      },\n    })\n      .then(response => {       //must be arrow functions!\n        return response.json();\n      })\n      .then(obj => {            //must be arrow functions!\n        this.setState({ films: obj });\n        console.log(obj)\n      });\n  }\n\n  render() {\n\n    let arrayOfContainers = this.state.films.map(item => <TabContainer key={Math.floor(Math.random() * 10000)} film={item}/>)\n\n    return (\n      <div className=\"App\">\n        <Header />\n        {arrayOfContainers}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}